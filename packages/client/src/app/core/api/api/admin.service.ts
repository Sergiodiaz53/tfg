/**
 * TFG API
 * Test description
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { History } from '../model/history';
import { HistoryLine } from '../model/historyLine';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { InlineResponse2004 } from '../model/inlineResponse2004';
import { InlineResponse2005 } from '../model/inlineResponse2005';
import { Question } from '../model/question';
import { QuestionLevel } from '../model/questionLevel';
import { Questionary } from '../model/questionary';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AdminService {

    protected basePath = 'http://localhost:8000/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryCreate(data: History, observe?: 'body', reportProgress?: boolean): Observable<History>;
    public adminHistoryCreate(data: History, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<History>>;
    public adminHistoryCreate(data: History, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<History>>;
    public adminHistoryCreate(data: History, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminHistoryCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<History>(`${this.configuration.basePath}/admin/history/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this History.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public adminHistoryDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public adminHistoryDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public adminHistoryDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/admin/history/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryLineCreate(data: HistoryLine, observe?: 'body', reportProgress?: boolean): Observable<HistoryLine>;
    public adminHistoryLineCreate(data: HistoryLine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoryLine>>;
    public adminHistoryLineCreate(data: HistoryLine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoryLine>>;
    public adminHistoryLineCreate(data: HistoryLine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminHistoryLineCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HistoryLine>(`${this.configuration.basePath}/admin/history-line/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this HistoryLine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryLineDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public adminHistoryLineDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public adminHistoryLineDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public adminHistoryLineDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryLineDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/admin/history-line/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryLineList(page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public adminHistoryLineList(page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public adminHistoryLineList(page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public adminHistoryLineList(page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse200>(`${this.configuration.basePath}/admin/history-line/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this HistoryLine.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryLinePartialUpdate(id: number, data: HistoryLine, observe?: 'body', reportProgress?: boolean): Observable<HistoryLine>;
    public adminHistoryLinePartialUpdate(id: number, data: HistoryLine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoryLine>>;
    public adminHistoryLinePartialUpdate(id: number, data: HistoryLine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoryLine>>;
    public adminHistoryLinePartialUpdate(id: number, data: HistoryLine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryLinePartialUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminHistoryLinePartialUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<HistoryLine>(`${this.configuration.basePath}/admin/history-line/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this HistoryLine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryLineRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<HistoryLine>;
    public adminHistoryLineRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoryLine>>;
    public adminHistoryLineRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoryLine>>;
    public adminHistoryLineRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryLineRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<HistoryLine>(`${this.configuration.basePath}/admin/history-line/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this HistoryLine.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryLineUpdate(id: number, data: HistoryLine, observe?: 'body', reportProgress?: boolean): Observable<HistoryLine>;
    public adminHistoryLineUpdate(id: number, data: HistoryLine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoryLine>>;
    public adminHistoryLineUpdate(id: number, data: HistoryLine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoryLine>>;
    public adminHistoryLineUpdate(id: number, data: HistoryLine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryLineUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminHistoryLineUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<HistoryLine>(`${this.configuration.basePath}/admin/history-line/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryList(page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public adminHistoryList(page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public adminHistoryList(page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public adminHistoryList(page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2001>(`${this.configuration.basePath}/admin/history/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this History.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryPartialUpdate(id: number, data: History, observe?: 'body', reportProgress?: boolean): Observable<History>;
    public adminHistoryPartialUpdate(id: number, data: History, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<History>>;
    public adminHistoryPartialUpdate(id: number, data: History, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<History>>;
    public adminHistoryPartialUpdate(id: number, data: History, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryPartialUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminHistoryPartialUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<History>(`${this.configuration.basePath}/admin/history/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this History.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<History>;
    public adminHistoryRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<History>>;
    public adminHistoryRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<History>>;
    public adminHistoryRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<History>(`${this.configuration.basePath}/admin/history/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this History.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminHistoryUpdate(id: number, data: History, observe?: 'body', reportProgress?: boolean): Observable<History>;
    public adminHistoryUpdate(id: number, data: History, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<History>>;
    public adminHistoryUpdate(id: number, data: History, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<History>>;
    public adminHistoryUpdate(id: number, data: History, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminHistoryUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminHistoryUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<History>(`${this.configuration.basePath}/admin/history/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionCreate(data: Question, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public adminQuestionCreate(data: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public adminQuestionCreate(data: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public adminQuestionCreate(data: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Question>(`${this.configuration.basePath}/admin/question/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Question.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public adminQuestionDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public adminQuestionDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public adminQuestionDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/admin/question/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionLevelCreate(data: QuestionLevel, observe?: 'body', reportProgress?: boolean): Observable<QuestionLevel>;
    public adminQuestionLevelCreate(data: QuestionLevel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionLevel>>;
    public adminQuestionLevelCreate(data: QuestionLevel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionLevel>>;
    public adminQuestionLevelCreate(data: QuestionLevel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionLevelCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<QuestionLevel>(`${this.configuration.basePath}/admin/question-level/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this QuestionLevel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionLevelDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public adminQuestionLevelDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public adminQuestionLevelDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public adminQuestionLevelDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionLevelDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/admin/question-level/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionLevelList(page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public adminQuestionLevelList(page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public adminQuestionLevelList(page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public adminQuestionLevelList(page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2002>(`${this.configuration.basePath}/admin/question-level/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this QuestionLevel.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionLevelPartialUpdate(id: number, data: QuestionLevel, observe?: 'body', reportProgress?: boolean): Observable<QuestionLevel>;
    public adminQuestionLevelPartialUpdate(id: number, data: QuestionLevel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionLevel>>;
    public adminQuestionLevelPartialUpdate(id: number, data: QuestionLevel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionLevel>>;
    public adminQuestionLevelPartialUpdate(id: number, data: QuestionLevel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionLevelPartialUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionLevelPartialUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<QuestionLevel>(`${this.configuration.basePath}/admin/question-level/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this QuestionLevel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionLevelRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<QuestionLevel>;
    public adminQuestionLevelRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionLevel>>;
    public adminQuestionLevelRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionLevel>>;
    public adminQuestionLevelRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionLevelRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<QuestionLevel>(`${this.configuration.basePath}/admin/question-level/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this QuestionLevel.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionLevelUpdate(id: number, data: QuestionLevel, observe?: 'body', reportProgress?: boolean): Observable<QuestionLevel>;
    public adminQuestionLevelUpdate(id: number, data: QuestionLevel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionLevel>>;
    public adminQuestionLevelUpdate(id: number, data: QuestionLevel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionLevel>>;
    public adminQuestionLevelUpdate(id: number, data: QuestionLevel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionLevelUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionLevelUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<QuestionLevel>(`${this.configuration.basePath}/admin/question-level/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionList(page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public adminQuestionList(page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public adminQuestionList(page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public adminQuestionList(page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2003>(`${this.configuration.basePath}/admin/question/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Question.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionPartialUpdate(id: number, data: Question, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public adminQuestionPartialUpdate(id: number, data: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public adminQuestionPartialUpdate(id: number, data: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public adminQuestionPartialUpdate(id: number, data: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionPartialUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionPartialUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Question>(`${this.configuration.basePath}/admin/question/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Question.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public adminQuestionRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public adminQuestionRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public adminQuestionRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Question>(`${this.configuration.basePath}/admin/question/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Question.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionUpdate(id: number, data: Question, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public adminQuestionUpdate(id: number, data: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public adminQuestionUpdate(id: number, data: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public adminQuestionUpdate(id: number, data: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Question>(`${this.configuration.basePath}/admin/question/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionaryCreate(data: Questionary, observe?: 'body', reportProgress?: boolean): Observable<Questionary>;
    public adminQuestionaryCreate(data: Questionary, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Questionary>>;
    public adminQuestionaryCreate(data: Questionary, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Questionary>>;
    public adminQuestionaryCreate(data: Questionary, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionaryCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Questionary>(`${this.configuration.basePath}/admin/questionary/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Questionary.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionaryDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public adminQuestionaryDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public adminQuestionaryDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public adminQuestionaryDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionaryDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/admin/questionary/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionaryList(page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2004>;
    public adminQuestionaryList(page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2004>>;
    public adminQuestionaryList(page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2004>>;
    public adminQuestionaryList(page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2004>(`${this.configuration.basePath}/admin/questionary/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Questionary.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionaryPartialUpdate(id: number, data: Questionary, observe?: 'body', reportProgress?: boolean): Observable<Questionary>;
    public adminQuestionaryPartialUpdate(id: number, data: Questionary, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Questionary>>;
    public adminQuestionaryPartialUpdate(id: number, data: Questionary, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Questionary>>;
    public adminQuestionaryPartialUpdate(id: number, data: Questionary, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionaryPartialUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionaryPartialUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Questionary>(`${this.configuration.basePath}/admin/questionary/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Questionary.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionaryRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<Questionary>;
    public adminQuestionaryRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Questionary>>;
    public adminQuestionaryRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Questionary>>;
    public adminQuestionaryRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionaryRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Questionary>(`${this.configuration.basePath}/admin/questionary/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this Questionary.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminQuestionaryUpdate(id: number, data: Questionary, observe?: 'body', reportProgress?: boolean): Observable<Questionary>;
    public adminQuestionaryUpdate(id: number, data: Questionary, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Questionary>>;
    public adminQuestionaryUpdate(id: number, data: Questionary, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Questionary>>;
    public adminQuestionaryUpdate(id: number, data: Questionary, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminQuestionaryUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminQuestionaryUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Questionary>(`${this.configuration.basePath}/admin/questionary/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUserCreate(data: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public adminUserCreate(data: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public adminUserCreate(data: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public adminUserCreate(data: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminUserCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.configuration.basePath}/admin/user/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUserDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public adminUserDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public adminUserDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public adminUserDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminUserDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/admin/user/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUserList(page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2005>;
    public adminUserList(page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2005>>;
    public adminUserList(page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2005>>;
    public adminUserList(page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2005>(`${this.configuration.basePath}/admin/user/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this user.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUserPartialUpdate(id: number, data: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public adminUserPartialUpdate(id: number, data: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public adminUserPartialUpdate(id: number, data: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public adminUserPartialUpdate(id: number, data: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminUserPartialUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminUserPartialUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<User>(`${this.configuration.basePath}/admin/user/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUserRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public adminUserRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public adminUserRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public adminUserRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminUserRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.configuration.basePath}/admin/user/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * A viewset that provides default &#x60;create()&#x60;, &#x60;retrieve()&#x60;, &#x60;update()&#x60;, &#x60;partial_update()&#x60;, &#x60;destroy()&#x60; and &#x60;list()&#x60; actions.
     * @param id A unique integer value identifying this user.
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUserUpdate(id: number, data: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public adminUserUpdate(id: number, data: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public adminUserUpdate(id: number, data: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public adminUserUpdate(id: number, data: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling adminUserUpdate.');
        }
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling adminUserUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<User>(`${this.configuration.basePath}/admin/user/${encodeURIComponent(String(id))}/`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
